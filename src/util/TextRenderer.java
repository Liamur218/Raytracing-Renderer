package util;

public abstract class TextRenderer {

    public static final int HEIGHT = 5;

    public static byte[][] renderChar(char c) {
        switch (c) {
            case 'A' -> {
                return new byte[][]{
                        {1, 1, 1},
                        {1, 0, 1},
                        {1, 1, 1},
                        {1, 0, 1},
                        {1, 0, 1}};
            }
            case 'B' -> {
                return new byte[][]{
                        {1, 1, 0},
                        {1, 0, 1},
                        {1, 1, 0},
                        {1, 0, 1},
                        {1, 1, 0}};
            }
            case 'C' -> {
                return new byte[][]{
                        {1, 1, 1, 1},
                        {1, 0, 0, 0},
                        {1, 0, 0, 0},
                        {1, 0, 0, 0},
                        {1, 1, 1, 1}};
            }
            case 'D' -> {
                return new byte[][]{
                        {1, 1, 1, 0},
                        {1, 0, 0, 1},
                        {1, 0, 0, 1},
                        {1, 0, 0, 1},
                        {1, 1, 1, 0}};
            }
            case 'E' -> {
                return new byte[][]{
                        {1, 1, 1, 1},
                        {1, 0, 0, 0},
                        {1, 1, 1, 0},
                        {1, 0, 0, 0},
                        {1, 1, 1, 1}};
            }
            case 'F' -> {
                return new byte[][]{
                        {1, 1, 1, 1},
                        {1, 0, 0, 0},
                        {1, 1, 1, 0},
                        {1, 0, 0, 0},
                        {1, 0, 0, 0}};
            }
            case 'G' -> {
                return new byte[][]{
                        {1, 1, 1, 1},
                        {1, 0, 0, 0},
                        {1, 0, 1, 1},
                        {1, 0, 0, 1},
                        {1, 1, 1, 1}};
            }
            case 'H' -> {
                return new byte[][]{
                        {1, 0, 1},
                        {1, 0, 1},
                        {1, 1, 1},
                        {1, 0, 1},
                        {1, 0, 1}};
            }
            case 'I' -> {
                return new byte[][]{
                        {1, 1, 1},
                        {0, 1, 0},
                        {0, 1, 0},
                        {0, 1, 0},
                        {1, 1, 1}};
            }
            case 'J' -> {
                return new byte[][]{
                        {0, 1, 1, 1},
                        {0, 0, 1, 0},
                        {0, 0, 1, 0},
                        {1, 0, 1, 0},
                        {1, 1, 1, 0}};
            }
            case 'K' -> {
                return new byte[][]{
                        {1, 0, 1},
                        {1, 0, 1},
                        {1, 1, 0},
                        {1, 0, 1},
                        {1, 0, 1}};
            }
            case 'L' -> {
                return new byte[][]{
                        {1, 0, 0},
                        {1, 0, 0},
                        {1, 0, 0},
                        {1, 0, 0},
                        {1, 1, 1}};
            }
            case 'M' -> {
                return new byte[][]{
                        {1, 0, 0, 0, 1},
                        {1, 1, 0, 1, 1},
                        {1, 0, 1, 0, 1},
                        {1, 0, 0, 0, 1},
                        {1, 0, 0, 0, 1}};
            }
            case 'N' -> {
                return new byte[][]{
                        {1, 0, 0, 0, 1},
                        {1, 1, 0, 0, 1},
                        {1, 0, 1, 0, 1},
                        {1, 0, 0, 1, 1},
                        {1, 0, 0, 0, 1}};
            }
            case 'O' -> {
                return new byte[][]{
                        {0, 1, 0},
                        {1, 0, 1},
                        {1, 0, 1},
                        {1, 0, 1},
                        {0, 1, 0}};
            }
            case 'P' -> {
                return new byte[][]{
                        {1, 0, 1},
                        {1, 1, 1},
                        {1, 1, 1},
                        {1, 0, 0},
                        {1, 0, 0}};
            }
            case 'Q' -> {
                return new byte[][]{
                        {1, 1, 1, 1, 0},
                        {1, 0, 0, 1, 0},
                        {1, 0, 0, 1, 0},
                        {1, 0, 1, 1, 0},
                        {1, 1, 1, 1, 1}};
            }
            case 'R' -> {
                return new byte[][]{
                        {1, 1, 1},
                        {1, 0, 1},
                        {1, 1, 0},
                        {1, 0, 1},
                        {1, 0, 1}};
            }
            case 'S' -> {
                return new byte[][]{
                        {0, 1, 1},
                        {1, 0, 0},
                        {1, 1, 1},
                        {0, 0, 1},
                        {1, 1, 0}};
            }
            case 'T' -> {
                return new byte[][]{
                        {1, 1, 1},
                        {0, 1, 0},
                        {0, 1, 0},
                        {0, 1, 0},
                        {0, 1, 0}};
            }
            case 'U' -> {
                return new byte[][]{
                        {1, 0, 1},
                        {1, 0, 1},
                        {1, 0, 1},
                        {1, 0, 1},
                        {1, 1, 1}};
            }
            case 'V' -> {
                return new byte[][]{
                        {1, 0, 1},
                        {1, 0, 1},
                        {1, 0, 1},
                        {1, 0, 1},
                        {0, 1, 0}};
            }
            case 'W' -> {
                return new byte[][]{
                        {1, 0, 0, 0, 1},
                        {1, 0, 1, 0, 1},
                        {1, 0, 1, 0, 1},
                        {1, 0, 1, 0, 1},
                        {1, 1, 1, 1, 1}};
            }
            case 'X' -> {
                return new byte[][]{
                        {1, 0, 1},
                        {1, 0, 1},
                        {0, 1, 0},
                        {1, 0, 1},
                        {1, 0, 1}};
            }
            case 'Y' -> {
                return new byte[][]{
                        {1, 0, 1},
                        {1, 0, 1},
                        {0, 1, 0},
                        {0, 1, 0},
                        {0, 1, 0}};
            }
            case 'Z' -> {
                return new byte[][]{
                        {1, 1, 1},
                        {0, 0, 1},
                        {0, 1, 0},
                        {1, 0, 0},
                        {1, 1, 1}};
            }

            case '0' -> {
                return new byte[][]{
                        {1, 1, 1},
                        {1, 0, 1},
                        {1, 0, 1},
                        {1, 0, 1},
                        {1, 1, 1}};
            }
            case '1' -> {
                return new byte[][]{
                        {1},
                        {1},
                        {1},
                        {1},
                        {1}};
            }
            case '2' -> {
                return new byte[][]{
                        {1, 1, 1},
                        {0, 0, 1},
                        {1, 1, 1},
                        {1, 0, 0},
                        {1, 1, 1}};
            }
            case '3' -> {
                return new byte[][]{
                        {1, 1, 1},
                        {0, 0, 1},
                        {0, 1, 1},
                        {0, 0, 1},
                        {1, 1, 1}};
            }
            case '4' -> {
                return new byte[][]{
                        {1, 0, 1},
                        {1, 0, 1},
                        {1, 1, 1},
                        {0, 0, 1},
                        {0, 0, 1}};
            }
            case '5' -> {
                return new byte[][]{
                        {1, 1, 1},
                        {1, 0, 0},
                        {1, 1, 1},
                        {0, 0, 1},
                        {1, 1, 1}};
            }
            case '6' -> {
                return new byte[][]{
                        {1, 1, 1},
                        {1, 0, 0},
                        {1, 1, 1},
                        {1, 0, 1},
                        {1, 1, 1}};
            }
            case '7' -> {
                return new byte[][]{
                        {1, 1, 1},
                        {0, 0, 1},
                        {0, 0, 1},
                        {0, 0, 1},
                        {0, 0, 1}};
            }
            case '8' -> {
                return new byte[][]{
                        {1, 1, 1},
                        {1, 0, 1},
                        {1, 1, 1},
                        {1, 0, 1},
                        {1, 1, 1}};
            }
            case '9' -> {
                return new byte[][]{
                        {1, 1, 1},
                        {1, 0, 1},
                        {1, 1, 1},
                        {0, 0, 1},
                        {1, 1, 1}};
            }

            case ' ' -> {
                return new byte[][]{
                        {0},
                        {0},
                        {0},
                        {0},
                        {0}};
            }
            case '[' -> {
                return new byte[][]{
                        {1, 1},
                        {1, 0},
                        {1, 0},
                        {1, 0},
                        {1, 1}};
            }
            case ']' -> {
                return new byte[][]{
                        {1, 1},
                        {0, 1},
                        {0, 1},
                        {0, 1},
                        {1, 1}};
            }
            case ':' -> {
                return new byte[][]{
                        {0},
                        {1},
                        {0},
                        {1},
                        {0}};
            }

            default -> {
                return new byte[][]{ {}, {}, {}, {}, {} };
            }
        }
    }
}
